<br>

<i>

Bruno Blais (Polytechnique Montréal),
Toni El Geitani Nehme (Polytechnique Montreal),
Rene Gassmöller (University of California Davis),
and Peter Munch (Technical University of Munich and Helmholtz-Zentrum Geesthacht)
</i>

<h1>Introduction</h1>

<h3>Simulation of the motion of massless tracer particles in a vortical flow</h3>

Particles play an important part in numerical models for a large
 number of applications. Particles are routinely used
 as massless tracers to visualize the dynamic of a transient flow. They
 can also play an intrinsic role as part of a more complex finite element
 model, as is the case for the Particle-In-Cell (PIC) method (Gassmöller et al. 2018)
 or they can even be used to simulate the motion of granular matter, as in
 the Discrete Element Method (DEM) (Blais et al. 2019). In the case
 of DEM, the resulting model is not related to the finite element method anymore,
 but just leads to a system of ordinary differential equation which describes
 the motion of the particles and the dynamic of their collisions. All of
 these models can be built using deal.II's particle handling capabilities.

In the present step, we use particles as massless tracer to illustrate
the dynamic of a vortical flows. Since the particles are massless tracers,
the position of each particle $i$ is described by the
following ordinary differential equation (ODE):
@f[
\frac{d \textbf{x}_i}{dt} =\textbf{u}(\textbf{x}_i)
@f]

where $\textbf{x}_i$ is the postion of particle $i$ and $\textbf{u}(\textbf{x}_i)$ the flow velocity at its position.
In the present step, this ODE is solved using the explicit Euler method. The resulting scheme is:
@f[
\textbf{x}_{i}^{n+1} = \textbf{x}_{i}^{n} + \Delta t \; \textbf{u}(\textbf{x}_{i}^{n})
@f]

where $\textbf{x}_{i}^{n+1}$ and $\textbf{x}_{i}^{n}$ are the position
of particle $i$ at time $t+\Delta t$ and $t$, respectively and where $\Delta t$
is the time step. In the present step, the velocity at the location of particles
is obtained in two different fashions:
- By evaluating the velocity function at the location of the particles.
- By evaluating the velocity function on a background triangulation and, using
a  finite element support, interpolating at the position of the particle.

The first approach is generally not practical, since the velocity profile
is not known analytically. The second approach, based on interpolating a solution
at the position of the particles, mimics exactly what would be done in a
realistic computational fluid dynamic simulation. In this step, we illustrate both strategies.


We note that much greater accuracy could be obtained by using a fourth
order Runge-Kutta method or another appropriate scheme for the time integration
of the motion of the particles.  Implementing a more advanced advection scheme
would be a straightforward extension of this example.

<h3>Particles in deal.II</h3>

In deal.II, Particles::Particle are very simple and flexible entities that can be used
to build PIC, DEM or any type of particle-based models. Particles have a location
in real space, a location in the reference space of the element in which they
lie and a unique ID. In the majority of cases, simulations that include
particles require a significant number of them. Thus, it becomes interesting
to handle all particles through an entity which agglomerates all particles.
In deal.II, this is achieved through the use of the Particles::ParticleHandler class.

By default, particles do not have a diameter,
a mass or any other physical properties which we would generally expect of physical particles. Howevever, through
a ParticleHandler, particles have access to a Particles::PropertyPool. This PropertyPool is
an array which can be used to store any arbitrary number of properties
associated with the particles. Consequently, users can build their own
particle solver and attribute the desired properties to the particles (e.g. mass, charge
  diameter, temperature, etc.). In the present tutorial, this is used to
  store the value of the fluid velocity and the process id to which the particles
  belong.

<h3>Challenges related to distributed particle simulations</h3>

Although the present step is not computationnaly intensive, simulations that
include particles can be computationnaly demanding and require parallelization.
The present step showcases the distributed parallel capabilities of deal.II for particles.
In general, there are three main challenges
that arise in parallel distributed simulations that include particle:
- Generating the particles on the distributed triangulation;
- Exchanging the particles that leave local domains between the processors;
- Load balancing the simulation so that every processor has a similar computational load.

Generating the particles is not straightforward since the processor to which they belong
must first be identified before the cell in which they are located is found.
Deal.II provides numerous capabilities to generate particles through the Particles::Generator namespace.
Some of these particle generator generate particles on the locally own subdomain. For example,
Particles::Generators::regular_reference_locations uses a regular reference location within each cell of
the subdomain or Particles::Generators::probabilistic_locations uses
a probability density function to generate the particles.

In some situations, such as the present step, particles must be generated at specific locations
on cells that are owned only by a subset of the processors. In  most of these situations,
the insertion of the particle is done for a very limited number of time-steps and, consequently,
does not constitute a large portion of the computational cost. For these occasions, deal.II provides
convenient Particles::Generators that can globally insert the particles even if they are not located
on the subdomain from which they are created. The generators first locate on which subdomain the particles
are situated, identify is which cell they are located and exchange the necessary information amongst the processors
to ensure that the particle is generated with the right properties. Consequently, this type of particle generation
is communication intensive. The Particles::Generators::dof_support_points and the Particles::Generators::quadrature_points
generate particles using a, possible non-matching, triangulation and the points of an associated dof_handler or quadrature respectively.
Furthermore, the Particles::ParticleHandler class provides the Particles::ParticleHandler::insert_global_particles function
which enables the global insertion of particles from a vector of points and a global vector of bounding boxes. In the present step,
we use the Particles::Generators::quadrature_points to insert the particle in the shape of a circle.


<h3>The testcase</h3>

In the present step, we use particles as massless tracers to illustrate
the dynamics of a particular vortical flow : the Rayleigh-Kotte Vortex. This flow pattern
is generally used as a complex test case for interface tracking methods
(e.g. volume-of-fluid and level set approches) since
it leads to strong rotation and elongation of the fluid (Blais 2013).

The stream function $\Psi$ of this Rayleigh-Kotte vortex is defined as:

@f[
\Psi = \frac{1}{\pi} sin^2 (\pi x) \sin^2 (\pi y) \cos \left( \pi \frac{t}{T} \right)
@f]
where $T$ is the period of the flow. The velocity profile in 2D ($\textbf{u}=[u,v]^T$) is :
@f{eqnarray*}
   u &=&  - \frac{\partial\Psi}{\partial y} = -2 \sin^2 (\pi x) \sin (\pi y) \cos (\pi y)  \cos \left( \pi \frac{t}{T} \right)\\
   v &=&  \frac{\partial\Psi}{\partial x} = 2 \cos(\pi x) \sin(\pi x) \sin^2 (\pi y) \cos \left( \pi \frac{t}{T} \right)
@f}





<h3>References</h3>

<ul>
<li> Blais, Bruno, et al. (2019) "Experimental Methods in Chemical Engineering: Discrete
 Element Method—DEM."  The Canadian Journal of Chemical Engineering 97.7 :  1964-1973.

<li>Gassmöller, Rene, et al. (2018). "Flexible and Scalable Particle‐in‐Cell Methods With
  Adaptive Mesh Refinement for Geodynamic Computations." Geochemistry, Geophysics,
   Geosystems 19.9 : 3596-3604.

 <li>Blais, Bruno, et al. (2013) "Dealing with more than two materials in the FVCF–ENIP method."
 European Journal of Mechanics-B/Fluids 42 1-9.
 </ul>
